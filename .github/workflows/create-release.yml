name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Select the version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - none
          - patch
          - minor
          - major

# Prevent multiple release workflows in parallel
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get_version.outputs.APP_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: python -m pip install -r requirements.txt --upgrade

      - name: Determine Version and Tag
        id: set_version
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          if [ "${{ github.event.inputs.version_bump }}" != "none" ]; then
            # Bump version
            new_version=$(python bump_version.py ${{ github.event.inputs.version_bump }})
            git add src/utils/version.py
            git commit -m "Bump version to $new_version" || echo "No changes to commit"
            git push origin ${{ github.ref_name }}
            echo "APP_VERSION=$new_version" >> $GITHUB_OUTPUT
          else
            # Prerelease tag
            git fetch --tags
            version=$(python -c "from src.utils.version import APP_VERSION; print(APP_VERSION)")
            # Append GitHub run ID to ensure unique tag
            prerelease_version="${version}+build${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}"
            echo "APP_VERSION=$prerelease_version" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ${{ matrix.os }}
    needs: prepare_release
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: python -m pip install -r requirements.txt --upgrade

      - name: Bundle application (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File .\bundle_app_windows.ps1
        shell: pwsh

      - name: Verify artifact exists (Windows)
        if: runner.os == 'Windows'
        run: |
          $file = "./dist/NITools_${{ runner.os }}_v${{ needs.prepare_release.outputs.app_version }}.zip"
          if (-Not (Test-Path $file)) {
            Write-Error "Expected artifact not found: $file"
            exit 1
          }
        shell: pwsh

      - name: Bundle application (macOS)
        if: runner.os == 'macOS'
        run: bash ./bundle_app_macos.sh
        shell: bash

      - name: Verify artifact exists (macOS)
        if: runner.os == 'macOS'
        run: |
          file="./dist/NITools_${{ runner.os }}_v${{ needs.prepare_release.outputs.app_version }}.zip"
          if [ ! -f "$file" ]; then
            echo "::error::Expected artifact not found: $file"
            exit 1
          fi
        shell: bash

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare_release.outputs.app_version }}
          files: ./dist/NITools_${{ runner.os }}_v${{ needs.prepare_release.outputs.app_version }}.zip
          name: Release v${{ needs.prepare_release.outputs.app_version }}
          draft: false
          prerelease: ${{ github.event.inputs.version_bump == 'none' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
