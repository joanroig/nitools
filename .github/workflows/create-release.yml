name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Select the version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - none
          - patch
          - minor
          - major

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: python -m pip install -r requirements.txt --upgrade

      - name: Bump and Commit Version
        if: github.event.inputs.version_bump != 'none'
        run: |
          new_version=$(python bump_version.py ${{ github.event.inputs.version_bump }})
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add src/utils/version.py
          git commit -m "Bump version to $new_version"
        shell: bash

      - name: Push changes
        if: github.event.inputs.version_bump != 'none'
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Move tag to latest commit if bump is none
        if: github.event.inputs.version_bump == 'none'
        run: |
          git fetch --tags
          version=$(python -c "from src.utils.version import APP_VERSION; print(APP_VERSION)")
          tag_name="v$version"
          git tag -d $tag_name || true
          git push --delete origin $tag_name || true
          git tag $tag_name
          git push origin $tag_name
        shell: bash

      - name: Bundle application
        run: powershell -ExecutionPolicy Bypass -File .\bundle_app.ps1
        shell: pwsh

      - name: Get Version
        id: get_version
        run: |
          $version = python -c "from src.utils.version import APP_VERSION; print(APP_VERSION)" | ForEach-Object { $_.Trim() }
          echo "APP_VERSION=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.APP_VERSION }}
          files: ./dist/NITools_v${{ steps.get_version.outputs.APP_VERSION }}.zip
          name: Release v${{ steps.get_version.outputs.APP_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
